datasource db {
    provider = "postgres"
    url      = env("POSTGRES_URL")
}

generator db {
    provider = "go run github.com/steebchen/prisma-client-go"
}

model Post {
    id        String    @id @default(uuid())
    caption   String
    images    Media[]
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    deleted   Boolean   @default(false)
    User      User      @relation(fields: [userId], references: [id])
    userId    String
    likes     BigInt    @default(0)
    comments  BigInt    @default(0)
    shares    BigInt    @default(0)
    Like      Like[]
    Comment   Comment[]
}

model Media {
    id    String @id @default(uuid())
    pID   String
    media String
    Post  Post   @relation(fields: [pID], references: [id])
}

model User {
    id        String       @id
    username  String       @unique
    email     String       @unique
    password  String
    name      String?
    pic       String?
    profile   UserProfile? @relation
    posts     Post[]
    activated Boolean      @default(false)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    Token Token[]

    // Followers and Following Relations with unique relation names
    following Follow[]  @relation("UserFollowing")
    followers Follow[]  @relation("UserFollowers")
    Like      Like[]
    Comment   Comment[]
    Reply     Reply[]
}

model UserProfile {
    uID        String  @unique
    user       User    @relation(fields: [uID], references: [id])
    bio        String?
    gender     String?
    postNumber Int     @default(0)
    followers  Int     @default(0)
    following  Int     @default(0)
}

model Token {
    id    String   @id @default(uuid())
    uID   String
    token String   @unique
    ttl   DateTime
    scope String
    user  User     @relation(fields: [uID], references: [id], onDelete: Cascade)
}

model Follow {
    followerId  String
    followingId String
    createdAt   DateTime @default(now())

    follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId]) // Composite primary key
}

model Like {
    id        String   @id @default(uuid())
    userId    String
    targetId  String // UUID of Post, Comment, or Reply
    type      LikeType
    createdAt DateTime @default(now())

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    Post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    Comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
    Reply     Reply?   @relation(fields: [replyId], references: [id])
    replyId   String?

    @@unique([userId, targetId, type]) // Ensure a user can like only once per entity
}

enum LikeType {
    POST
    COMMENT
    REPLY
}

model Comment {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    comment   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    likes     BigInt   @default(0)
    createdAt DateTime @default(now())
    Reply     Reply[]
    Like      Like[]
}

model Reply {
    id            String  @id @default(uuid())
    userId        String
    commentId     String
    parentReplyId String?
    reply         String
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    parentReply Reply?   @relation("ReplyToReply", fields: [parentReplyId], references: [id], onDelete: Cascade)
    replies     Reply[]  @relation("ReplyToReply")

    createdAt DateTime @default(now())
    likes     BigInt   @default(0)
    Like      Like[]
}
